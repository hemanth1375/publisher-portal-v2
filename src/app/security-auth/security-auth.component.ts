import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { SecurityAuthService } from '../services/security-auth.service';
@Component({
  selector: 'app-security-auth',
  templateUrl: './security-auth.component.html',
  styleUrl: './security-auth.component.css'
})
export class SecurityAuthComponent {
  endpointId: any

  tokenSigningToolTip="Helps legacy applications to sign JWT tokens generated by backends that weren't ready for JWT yet."
  tokenValidationToolTip="Enables validation of JWT tokens (OAuth) that have been issued by a third party identity provider (e.g.: OpenID Connect)"
  scopesToolTip = "List of all the audiences supported by this endpoint"
  audienceToolTip = "List of all the audiences supported by this endpoint"
  // exampleInputEmail1ToolTip="List of all the roles allowed to access this endpoint"
  keyToSignToolTip = "List of specific keys needing signing"
  algorithmselectToolTip = "Digital signatures and MACs algorithm"
  exampleInputEmail1ToolTip = "The URL to your JWK endpoint with the set of public keys used to verify the authenticity of JWT"
  scopesKeyToolTip = "The key name where the scopes can be found. The key can be a nested object using the . dot notation, e.g.: data.data2.scopes"
  issuerToolTip = "Who is the expected issuer of the claim"
  rolesKeyToolTip = "Key name where the roles are stored"
  cookieNameToolTip = "The key name of the cookie"
  roleKeysToolTip = "If the roles key is using a nested object using the . notation, must be checked in order to traverse the object."
  exampleFormControlTextarea1ToolTip = "All fingerprintsÂ must be in base64"
  tokenSignJwkUriToolTip = "Key name where the roles are storedThe URL to your JWK  endpoint with the set of private keys used to sign the token "

  apiRolesArray: string[] = []
  scopesArray: string[] = [];
  audienceArray: string[] = [];
  rolesArray: string[] = [];
  keysToSignArray: string[] = [];
  vFigurePrintArray: string[] = [];
  sFigurePrintArray: string[] = []

  entireJsonData: any


  @Input() formData: any;

  // isTokenValidationActive=false;
  // isTokenSigningActive=false;
  // isBasicAuthActive=false;
  isCustomChiperSuiteActive = false;
  @Output() authPageFormSubmitted = new EventEmitter<any>();

  // formGroup1: FormGroup;
  // formgroup2: FormGroup;
  formTokenValidationGroup!: FormGroup
  formTokenSigningGroup!: FormGroup
  formBasicAuthGroup!: FormGroup;
  apiKeysForm: FormGroup;
  keysArray: any[] = []
  authValidator: any = {
  };
  authValidatorArrayResult: any[] = []
  selectedCChiperSuitesValuesArray: any[] = []
  selectedSigningCChiperValuesArray: any[] = []


  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private securityAuthService: SecurityAuthService) {
    // this.formGroup1=this.formBuilder.group({})
    // this.formGroup1 = this.formBuilder.group({
    //   isTokenValidationActive: [false],
    //   isTokenSigningActive: [false],
    //   isBasicAuthActive: [false],
    //   algorithm: [null],
    //   jwkUri: [null],
    //   selectedMatcher: [null],
    //   scopesKey: [null],
    //   issuer: [null],
    //   rolesKey: [null],
    //   cookieName: [null],
    //   customChiperSuite: [null],
    //   tokenSignJwkUri: [null],
    //   tokenSignAlgorithm: [null],
    //   keyId: [null],
    //   audience: [null],
    //   roles: [null],
    //   scopesToValidate: [null],
    //   keysToSign: [null],
    //   fingerprint: [null],
    //   audienceArrayValue: [[]],
    //   rolesArrayValue: [[]],
    //   scopesToValidateArrayValue: [[]],
    //   keysToSignArrayValue: [[]],
    //   fingerprintArrayValue: [[]]
    // })
    // this.formTokenValidationGroup = this.formBuilder.group({
    //   isTokenValidationActive: [false],
    //   algorithm: [null],
    //   jwkUri: [null],
    //   scopesToValidate: [null],
    //   scopesKey: [null],
    //   selectedMatcher: [null],
    //   issuer: [null],
    //   audience: [null],
    //   roles: [null],
    //   rolesKey: [null],
    //   cookieName: [null],
    // rolesKeyCheckBox: [false],
    //   fingerprint: [null],
    //   customChiperSuite: [],
    //   customChiperSuiteCheckBox: [false]
    // })
    this.formTokenValidationGroup = this.formBuilder.group({
      isTokenValidationActive: [false], // Checkbox
      algorithm: [''], // Algorithm selection
      jwkUri: [''], // JWK URI input
      scopesToValidate: [''], // Scopes input field
      scopesKey: [''], // Scopes key field
      selectedMatcher: [''],
      issuer: [''], // Issuer input
      audience: [''],
      roles: [''],
      rolesKey: [''],
      cookieName: [''],
      vFigurePrint: [''], // Fingerprints textarea
      vFigurePrintArrayValue: [[]],
      rolesKeyCheckBox: [false],
      customChiperSuite: [false],
      enableCaching: [false], // Enable caching checkbox
      disableJwkSecurity: [false], // Disable JWK security checkbox
      audienceArrayValue: [[]],
      rolesArrayValue: [[]],
      scopesToValidateArrayValue: [[]],
      authvalidatorFingerprintArrayValue: [[]],
      authValidatorCChiperSuiteArrayValues: [[]]
    });

    this.formTokenSigningGroup = this.formBuilder.group({
      isTokenSigningActive: [false],
      tokenSignJwkUri: [''],
      tokenSignAlgorithm: [''],
      keysToSign: [''],
      keyId: [''],
      sFigurePrint: [''],
      sFigurePrintArrayValue: [[]],
      authsigningFingerprintArrayValue: [[]],
      isSCustomChipersuiteActive: [false],
      authSigningCChiperSuiteArrayValues: [[]],
      fullSerialization: [false],
      disableJwkSecurity: [false],
      keysToSignArrayValue: [[]],
    });

    this.formBasicAuthGroup = this.formBuilder.group({
      isBasicAuthActive: [false], // Toggle for enabling/disabling Basic Auth
      htpasswdPath: ['', Validators.required] // Path to .htpasswd file (conditionally required)
    });

    this.apiKeysForm = this.formBuilder.group({
      isAPIKeyAuthActive: [false],
      APIKey: [],
      apiRole: [],
      apiRolesArrayValue: [[]],
      description: [],
      keysArray: [[]],
      apiKeyAuthId: [null]
    })
  }


  onSubmitApiKeyAuthInfo(): void {
    if (this.apiKeysForm.valid) {
      console.log('Api key Auth Form submitted', this.apiKeysForm.value);
      this.apiKeysForm.get('APIKey')?.reset()
      this.apiKeysForm.get('apiRole')?.reset()
      this.apiKeysForm.get('description')?.reset()


      // if(this.apiKeysForm.get('isAPIKeyAuthActive')?.value){}

      const apikeybody = {
        ...this.apiKeysForm.get('isAPIKeyAuthActive')?.value && {
          "auth/api-keys": {
            ...(this.apiKeysForm.get('keysArray')?.value && this.apiKeysForm.get('keysArray')?.value?.length != 0 &&
            {
              "keys": this.apiKeysForm.get('keysArray')?.value
            })
          }
        }
      }

      this.securityAuthService.postSecurityAuthApiKey(apikeybody).subscribe(result => {
        console.log("onSubmitApiKeyAuthInfo", result);
        this.entireJsonData = result
      })
      console.log("apikeybody", apikeybody);
    }

  }

  onSubmitBasicAuthInfo(): void {
    if (this.formBasicAuthGroup.valid) {
      // console.log('Basic Auth Form Submitted:', this.formBasicAuthGroup.value);
      // const basicBasicAuth={
      //    ...this.formBasicAuthGroup.get('isBasicAuthActive')?.value &&   
      // }
      const basicAuthBody = {
        ...(this.formBasicAuthGroup.get('isBasicAuthActive')?.value && {
          "auth/basic": {
            "id": this.entireJsonData?.extra_config?.["auth/basic"]?.id ? this.entireJsonData?.extra_config?.["auth/basic"]?.id : null,
            ...(this.formBasicAuthGroup.get('htpasswdPath')?.value && { "htpasswd_path": this.formBasicAuthGroup.get('htpasswdPath')?.value })
          }
        })
      }
      console.log("formBasicAuthGroup:", basicAuthBody);
      this.securityAuthService.PostSecurityAuthValidator(basicAuthBody).subscribe(result => {
        console.log("onSubmitBasicAuthInfo", result);
        // this.entireJsonData = result
      })
      // 
    } else {
      console.log('Form is invalid!');
    }


  }

  // this.formgroup2 = this.formBuilder.group({

  // })

  authSigner: any = {};
  addTokenSigningIfPresent = (key: string, value: any) => {
    // Exclude key if value is undefined, null, empty string, or an empty array
    if (value !== undefined && value !== null && value !== '' &&
      !(Array.isArray(value) && value.length === 0)) {
      this.authSigner[key] = value;
    }
  }

  addTokenValidationKeyIfPresent = (key: string, value: any) => {
    if (key === 'id') {
      // Always add the "id" key, even if the value is null
      this.authValidator[key] = value;
    }
    else if (value !== undefined && value !== null && value !== '' && !(Array.isArray(value) && value.length === 0)) {
      this.authValidator[key] = value;
    }
  };


  onSubmitTokenValidationInfo() {
    if (this.formTokenValidationGroup.valid) {
      console.log('tokenvalidationgroup:', this.formTokenValidationGroup.value);
      let id = this.entireJsonData?.["auth/validator"]?.id ?? null

      // Add keys conditionally
      this.addTokenValidationKeyIfPresent('alg', this.formTokenValidationGroup.get('algorithm')?.value || 'EdDSA'); // Default to 'EdDSA'
      this.addTokenValidationKeyIfPresent('jwk_url', this.formTokenValidationGroup.get('jwkUri')?.value);
      this.addTokenValidationKeyIfPresent('scopes', this.formTokenValidationGroup.get('scopesToValidateArrayValue')?.value || []);
      this.addTokenValidationKeyIfPresent('scopes_matcher', this.formTokenValidationGroup.get('selectedMatcher')?.value); // Default to 'any'
      this.addTokenValidationKeyIfPresent('scopes_key', this.formTokenValidationGroup.get('scopesKey')?.value);
      this.addTokenValidationKeyIfPresent('issuer', this.formTokenValidationGroup.get('issuer')?.value);
      this.addTokenValidationKeyIfPresent('audience', this.formTokenValidationGroup.get('audienceArrayValue')?.value || []);
      this.addTokenValidationKeyIfPresent('roles', this.formTokenValidationGroup.get('rolesArrayValue')?.value || []);
      this.addTokenValidationKeyIfPresent('roles_key', this.formTokenValidationGroup.get('rolesKey')?.value);
      this.addTokenValidationKeyIfPresent('cookie_key', this.formTokenValidationGroup.get('cookieName')?.value);
      this.addTokenValidationKeyIfPresent('roles_key_is_nested', this.formTokenValidationGroup.get('rolesKeyCheckBox')?.value || false);
      this.addTokenValidationKeyIfPresent('jwk_finger_prints', this.formTokenValidationGroup.get('authvalidatorFingerprintArrayValue')?.value)
      this.addTokenValidationKeyIfPresent('cipher_suites', this.formTokenValidationGroup.get('authValidatorCChiperSuiteArrayValues')?.value);
      this.addTokenValidationKeyIfPresent('cache', this.formTokenValidationGroup.get('enableCaching')?.value || false);
      this.addTokenValidationKeyIfPresent('disable_jwk_security', this.formTokenValidationGroup.get('disableJwkSecurity')?.value || false);
      this.addTokenValidationKeyIfPresent('id', id);

      console.log("Constructed Auth Validator Object with Conditional Keys:", this.authValidator);

      this.securityAuthService.PostSecurityAuthValidator(this.authValidator).subscribe(result => {
        console.log("onSubmitTokenValidationInfo", result);
        this.entireJsonData = result
      })

    }
  }

  onSubmitTokenSigningInfo(): void {
    if (this.formTokenSigningGroup.valid) {
      // console.log('Form Submitted:', this.formTokenSigningGroup.value);
      this.addTokenSigningIfPresent('alg', this.formTokenSigningGroup.get('tokenSignAlgorithm')?.value || 'HS256');
      // this.addTokenSigningIfPresent('cipher_suites', this.formTokenSigningGroup.get('isTokenSigningActive')?.value ? [5] : []);
      this.addTokenSigningIfPresent('jwk_url', this.formTokenSigningGroup.get('tokenSignJwkUri')?.value);
      this.addTokenSigningIfPresent('keys_to_sign', this.formTokenSigningGroup.get('keysToSignArrayValue')?.value || []);
      this.addTokenSigningIfPresent('kid', this.formTokenSigningGroup.get('keyId')?.value);
      // this.addTokenSigningIfPresent('jwk_fingerprints', this.formTokenSigningGroup.get('keysToSignArrayValue')?.value || []); // Assuming the fingerprints come from the same array
      this.addTokenSigningIfPresent('full', this.formTokenSigningGroup.get('fullSerialization')?.value || false);
      this.addTokenSigningIfPresent('disable_jwk_security', this.formTokenSigningGroup.get('disableJwkSecurity')?.value || false);
      // console.log("onSubmitTokenSigningInfo ", this.authSigner);
    } else {
      console.log('Form is invalid!');
    }
    this.securityAuthService.postSecurityAuthSigner(this.authSigner).subscribe(result => {
      console.log("onSubmitTokenSigningInfo", result);
      // this.entireJsonData = result
    })
  }


  addKey() {
    this.keysArray.push(this.apiKeysForm.value)
    this.apiKeysForm.get('keysArray')?.setValue([...this.keysArray]);
    console.log(this.keysArray);
    // this.apiKeysForm.get('APIKey')?.reset();
    // this.apiKeysForm.get('role')?.reset();
    // this.apiKeysForm.get('description')?.reset();
  }

  removeAttribute(index: number, field: 'auth' | 'signing'): void {

    if (field === 'auth') {
      this.selectedCChiperSuitesValuesArray.splice(index, 1);
      this.formTokenValidationGroup.get('authValidatorCChiperSuiteArrayValues')?.setValue(this.selectedCChiperSuitesValuesArray); // Update the form control
    }
    else if (field === 'signing') {
      this.selectedSigningCChiperValuesArray.splice(index, 1)
      this.formTokenSigningGroup.get('authSigningCChiperSuiteArrayValues')?.setValue(this.selectedSigningCChiperValuesArray)
    }

  }

  ngOnInit() {
    this.route.parent?.paramMap.subscribe((params: any) => {
      this.endpointId = params.get('id')
      console.log('endpointId ID:', this.endpointId);
      if (this.endpointId) {
        // this.fetchkrakendJson();
      }
    })

    this.formTokenValidationGroup.get('authValidatorCChiperSuiteArrayValues')?.valueChanges.subscribe((values) => {
      this.selectedCChiperSuitesValuesArray = values;
    });

    this.formTokenSigningGroup.get('authSigningCChiperSuiteArrayValues')?.valueChanges.subscribe((values) => {
      this.selectedSigningCChiperValuesArray = values
    })


    this.securityAuthService.getSecurityAuth().subscribe({
      next: (result) => {
        console.log("*********************securityAuthServiceresult", result);
        this.entireJsonData = result
        this.authValidatorArrayResult = result?.['auth/validator']
        console.log("authValidatorArrayResult", this.authValidatorArrayResult);
      },
      error: (err) => {
        console.log("securityAuthService error", err);
      }


    })

    // this.formGroup1.valueChanges.subscribe(value => {
    //   console.log(value);
    //   this.authPageFormSubmitted.emit(value); // Emit form data on every change
    // });
  }
  changeStatus() {
    this.isCustomChiperSuiteActive = !this.isCustomChiperSuiteActive
    console.log(this.isCustomChiperSuiteActive);
  }

  // onToggleChangeStaticResponse(event: any, id: any) {
  //   console.log('id', id);
  //   (this as any)[id] = event.checked;
  // }

  addParameter(fieldName: 'apiRole' | 'audience' | 'roles' | 'scopesToValidate' | 'vFigurePrint' | 'keysToSign' | 'sFigurePrint') {

    let fieldValue: any
    if (fieldName === 'audience' || fieldName === 'roles' || fieldName === 'scopesToValidate' || fieldName === 'vFigurePrint') {
      fieldValue = this.formTokenValidationGroup.get(fieldName)?.value;
    }
    else if (fieldName === 'keysToSign') {
      fieldValue = this.formTokenSigningGroup.get(fieldName)?.value
    }
    else if (fieldName === 'apiRole') {
      fieldValue = this.apiKeysForm.get(fieldName)?.value
    }
    else if (fieldName === 'sFigurePrint') {
      fieldValue = this.formTokenSigningGroup.get(fieldName)?.value
    }
    // const fieldValue = this.formTokenSigningGroup.get(fieldName)?.value;
    // fieldValue= this.formTokenValidationGroup.get(fieldName)?.value;
    // fieldValue=this.apiKeysForm.get(fieldName)?.value
    console.log("9999999999999", fieldValue);
    if (fieldName) {
      if (fieldName === 'audience') {
        console.log("aaaaaaaaaaaaa audience");
        this.audienceArray.push(fieldValue);
        this.formTokenValidationGroup.get('audienceArrayValue')?.setValue([...this.audienceArray]);
      }
      else if (fieldName === 'roles') {
        this.rolesArray.push(fieldValue);
        this.formTokenValidationGroup.get('rolesArrayValue')?.setValue([...this.rolesArray]);
      }
      else if (fieldName === 'scopesToValidate') {
        console.log("scopesToValidate");
        this.scopesArray.push(fieldValue);
        this.formTokenValidationGroup.get('scopesToValidateArrayValue')?.setValue([...this.scopesArray]);
      }
      else if (fieldName === 'vFigurePrint') {
        this.vFigurePrintArray.push(fieldValue);
        this.formTokenValidationGroup.get('authvalidatorFingerprintArrayValue')?.setValue([...this.vFigurePrintArray]);
      } else if (fieldName === 'keysToSign') {
        this.keysToSignArray.push(fieldValue);
        this.formTokenSigningGroup.get('keysToSignArrayValue')?.setValue([...this.keysToSignArray]);
      }
      else if (fieldName === 'sFigurePrint') {
        this.sFigurePrintArray.push(fieldValue);
        this.formTokenSigningGroup.get('authsigningFingerprintArrayValue')?.setValue([...this.sFigurePrintArray])
      }
      else if (fieldName === 'apiRole') {
        this.apiRolesArray.push(fieldValue);
        console.log("******* fieldname:", 'apiRole');

        console.log("***************apiRolesArray:", this.apiRolesArray);

        this.apiKeysForm.get('apiRolesArrayValue')?.setValue([...this.apiRolesArray]);
      }
    }
  }

  removeParameter(index: number, fieldName: 'apiRole' | 'audience' | 'roles' | 'scopesToValidate' | 'vFigurePrint' | 'keysToSign' | 'sFigurePrint') {
    if (fieldName === "audience") {
      this.audienceArray.splice(index, 1);
      this.formTokenValidationGroup.get('audienceArrayValue')?.setValue([...this.audienceArray]);
    } else if (fieldName === 'roles') {
      this.rolesArray.splice(index, 1);
      this.formTokenValidationGroup.get('rolesArrayValue')?.setValue([...this.rolesArray]);
    } else if (fieldName === 'scopesToValidate') {
      this.scopesArray.splice(index, 1);
      this.formTokenValidationGroup.get('scopesToValidateArrayValue')?.setValue([...this.scopesArray]);
    } else if (fieldName === 'vFigurePrint') {
      this.sFigurePrintArray.splice(index, 1);
      this.formTokenValidationGroup.get('fingerprintArrayValue')?.setValue([...this.vFigurePrintArray]);
    }
    else if (fieldName === 'sFigurePrint') {
      this.sFigurePrintArray.slice(index, 1)
      this.formTokenSigningGroup.get('authsigningFingerprintArrayValue')?.setValue([...this.sFigurePrintArray])
    }
    else if (fieldName === 'keysToSign') {
      this.keysToSignArray.splice(index, 1);
      this.formTokenSigningGroup.get('keysToSignArrayValue')?.setValue([...this.keysToSignArray]);
    } else if (fieldName === 'apiRole') {
      this.apiRolesArray.splice(index, 1);
      this.apiKeysForm.get('apiRolesArrayValue')?.setValue([...this.apiRolesArray]);

    }
  }

  // saveForm() {
  //   console.log("submitted")
  //   console.log(this.formGroup1.value);
  //   this.authPageFormSubmitted.emit(this.formGroup1.value)

  // }
  constants = {
    algorithms: [
      { alg: 'EdDSA', desc: 'EdDSA' },
      { alg: 'HS256', desc: 'HS256 - HMAC using SHA-256' },
      { alg: 'HS384', desc: 'HS384 - HMAC using SHA-384' },
      { alg: 'HS512', desc: 'HS512 - HMAC using SHA-512' },
      { alg: 'RS256', desc: 'RS256 - RSASSA-PKCS-v1.5 using SHA-256' },
      { alg: 'RS384', desc: 'RS384 - RSASSA-PKCS-v1.5 using SHA-384' },
      { alg: 'RS512', desc: 'RS512 - RSASSA-PKCS-v1.5 using SHA-512' },
      { alg: 'ES256', desc: 'ES256 - ECDSA using P-256 and SHA-256' },
      { alg: 'ES384', desc: 'ES384 - ECDSA using P-384 and SHA-384' },
      { alg: 'ES512', desc: 'ES512 - ECDSA using P-521 and SHA-512' },
      { alg: 'PS256', desc: 'PS256 - RSASSA-PSS using SHA256 and MGF1-SHA256' },
      { alg: 'PS384', desc: 'PS384 - RSASSA-PSS using SHA384 and MGF1-SHA384' },
      { alg: 'PS512', desc: 'PS512 - RSASSA-PSS using SHA512 and MGF1-SHA512' },
    ],
    customCipherSuites: [
      { value: 5, name: 'TLS_RSA_WITH_RC4_128_SHA' },
      { value: 10, name: 'TLS_RSA_WITH_3DES_EDE_CBC_SHA' },
      { value: 47, name: 'TLS_RSA_WITH_AES_128_CBC_SHA' },
      { value: 53, name: 'TLS_RSA_WITH_AES_256_CBC_SHA' },
      { value: 60, name: 'TLS_RSA_WITH_AES_128_CBC_SHA256' },
      { value: 156, name: 'TLS_RSA_WITH_AES_128_GCM_SHA256' },
      { value: 157, name: 'TLS_RSA_WITH_AES_256_GCM_SHA384' },
      { value: 49159, name: 'TLS_ECDHE_ECDSA_WITH_RC4_128_SHA' },
      { value: 49161, name: 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA' },
      { value: 49162, name: 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA' },
      { value: 49169, name: 'TLS_ECDHE_RSA_WITH_RC4_128_SHA' },
      { value: 49170, name: 'TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA' },
      { value: 49171, name: 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA' },
      { value: 49172, name: 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA' },
      { value: 49187, name: 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256' },
      { value: 49191, name: 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' },
      { value: 49195, name: 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256' },
      { value: 49196, name: 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384' },
      { value: 49199, name: 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256' },
      { value: 49200, name: 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384' },
      { value: 52392, name: 'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305' },
      { value: 52393, name: 'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305' }
    ]
  };


}
